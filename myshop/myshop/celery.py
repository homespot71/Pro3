"""
Этот файл будет содержать конфигурацию Celery. Работник Celery – это процесс, или рабочий узел, который занимается слу-
жебными функциями, такими как отправка/получение сообщений очереди,
регистрация заданий, уничтожение зависших заданий, отслеживание состоя-
ния и т. д. Экземпляр работника может потреблять любое число очередей
сообщений
"""

import os
from celery import Celery

# задать стандартный модуль настроек Django
# для программы 'celery'.
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myshop.settings')
app = Celery('myshop')
app.config_from_object('django.conf:settings', namespace='CELERY')
app.autodiscover_tasks()


"""
В приведенном выше исходном коде делается следующее:
• задается переменная DJANGO_SETTINGS_MODULE для встроенной в Celery
программы командной строки;
• посредством инструкции app = Celery('myshop') создается экземпляр
приложения;
• используя метод config_from_object(), загружается любая конкретно-
прикладная конфигурация из настроек проекта. Атрибут namespace за-
дает префикс, который будет в вашем файле settings.py у настроек,
связанных с Celery. Задав именное пространство CELERY, все настройки
Celery должны включать в свое имя префикс CELERY_ (например, CELERY_
BROKER_URL);
• наконец, сообщается, чтобы очередь заданий Celery автоматически об-
наруживала асинхронные задания в ваших приложениях. Celery будет
искать файл tasks.py в каждом каталоге приложений, добавленных в INSTALLED_
APPS, чтобы загружать определенные в нем асинхронные задания."""

